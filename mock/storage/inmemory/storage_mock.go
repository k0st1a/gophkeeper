// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/ports/client/storage.go
//
// Generated by this command:
//
//	mockgen -source ./internal/ports/client/storage.go -destination mock/storage/inmemory/storage_mock.go -package mock -write_source_comment
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	client "github.com/k0st1a/gophkeeper/internal/ports/client"
	gomock "go.uber.org/mock/gomock"
)

// MockItemStorage is a mock of ItemStorage interface.
type MockItemStorage struct {
	ctrl     *gomock.Controller
	recorder *MockItemStorageMockRecorder
	isgomock struct{}
}

// MockItemStorageMockRecorder is the mock recorder for MockItemStorage.
type MockItemStorageMockRecorder struct {
	mock *MockItemStorage
}

// NewMockItemStorage creates a new mock instance.
func NewMockItemStorage(ctrl *gomock.Controller) *MockItemStorage {
	mock := &MockItemStorage{ctrl: ctrl}
	mock.recorder = &MockItemStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemStorage) EXPECT() *MockItemStorageMockRecorder {
	return m.recorder
}

// Clear mocks base method.
func (m *MockItemStorage) Clear(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clear", ctx)
}

// Clear indicates an expected call of Clear.
func (mr *MockItemStorageMockRecorder) Clear(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockItemStorage)(nil).Clear), ctx)
}

// CreateItem mocks base method.
func (m *MockItemStorage) CreateItem(ctx context.Context, item *client.Item) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateItem", ctx, item)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateItem indicates an expected call of CreateItem.
func (mr *MockItemStorageMockRecorder) CreateItem(ctx, item any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateItem", reflect.TypeOf((*MockItemStorage)(nil).CreateItem), ctx, item)
}

// DeleteItem mocks base method.
func (m *MockItemStorage) DeleteItem(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteItem", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteItem indicates an expected call of DeleteItem.
func (mr *MockItemStorageMockRecorder) DeleteItem(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteItem", reflect.TypeOf((*MockItemStorage)(nil).DeleteItem), ctx, id)
}

// GetItem mocks base method.
func (m *MockItemStorage) GetItem(ctx context.Context, id string) (*client.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItem", ctx, id)
	ret0, _ := ret[0].(*client.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItem indicates an expected call of GetItem.
func (mr *MockItemStorageMockRecorder) GetItem(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItem", reflect.TypeOf((*MockItemStorage)(nil).GetItem), ctx, id)
}

// ListItems mocks base method.
func (m *MockItemStorage) ListItems(ctx context.Context) ([]client.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListItems", ctx)
	ret0, _ := ret[0].([]client.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListItems indicates an expected call of ListItems.
func (mr *MockItemStorageMockRecorder) ListItems(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListItems", reflect.TypeOf((*MockItemStorage)(nil).ListItems), ctx)
}

// UpdateItem mocks base method.
func (m *MockItemStorage) UpdateItem(ctx context.Context, item *client.UpdateItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItem", ctx, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateItem indicates an expected call of UpdateItem.
func (mr *MockItemStorageMockRecorder) UpdateItem(ctx, item any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItem", reflect.TypeOf((*MockItemStorage)(nil).UpdateItem), ctx, item)
}
