// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package model

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonA80d3b19DecodeGithubComK0st1aGophkeeperInternalPkgClientModel(in *jlexer.Lexer, out *Item) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "card":
			if in.IsNull() {
				in.Skip()
				out.Card = nil
			} else {
				if out.Card == nil {
					out.Card = new(Card)
				}
				easyjsonA80d3b19DecodeGithubComK0st1aGophkeeperInternalPkgClientModel1(in, out.Card)
			}
		case "password":
			if in.IsNull() {
				in.Skip()
				out.Password = nil
			} else {
				if out.Password == nil {
					out.Password = new(Password)
				}
				easyjsonA80d3b19DecodeGithubComK0st1aGophkeeperInternalPkgClientModel2(in, out.Password)
			}
		case "note":
			if in.IsNull() {
				in.Skip()
				out.Note = nil
			} else {
				if out.Note == nil {
					out.Note = new(Note)
				}
				easyjsonA80d3b19DecodeGithubComK0st1aGophkeeperInternalPkgClientModel3(in, out.Note)
			}
		case "file":
			if in.IsNull() {
				in.Skip()
				out.File = nil
			} else {
				if out.File == nil {
					out.File = new(File)
				}
				easyjsonA80d3b19DecodeGithubComK0st1aGophkeeperInternalPkgClientModel4(in, out.File)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA80d3b19EncodeGithubComK0st1aGophkeeperInternalPkgClientModel(out *jwriter.Writer, in Item) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"card\":"
		out.RawString(prefix[1:])
		if in.Card == nil {
			out.RawString("null")
		} else {
			easyjsonA80d3b19EncodeGithubComK0st1aGophkeeperInternalPkgClientModel1(out, *in.Card)
		}
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		if in.Password == nil {
			out.RawString("null")
		} else {
			easyjsonA80d3b19EncodeGithubComK0st1aGophkeeperInternalPkgClientModel2(out, *in.Password)
		}
	}
	{
		const prefix string = ",\"note\":"
		out.RawString(prefix)
		if in.Note == nil {
			out.RawString("null")
		} else {
			easyjsonA80d3b19EncodeGithubComK0st1aGophkeeperInternalPkgClientModel3(out, *in.Note)
		}
	}
	{
		const prefix string = ",\"file\":"
		out.RawString(prefix)
		if in.File == nil {
			out.RawString("null")
		} else {
			easyjsonA80d3b19EncodeGithubComK0st1aGophkeeperInternalPkgClientModel4(out, *in.File)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Item) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA80d3b19EncodeGithubComK0st1aGophkeeperInternalPkgClientModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Item) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA80d3b19EncodeGithubComK0st1aGophkeeperInternalPkgClientModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Item) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA80d3b19DecodeGithubComK0st1aGophkeeperInternalPkgClientModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Item) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA80d3b19DecodeGithubComK0st1aGophkeeperInternalPkgClientModel(l, v)
}
func easyjsonA80d3b19DecodeGithubComK0st1aGophkeeperInternalPkgClientModel4(in *jlexer.Lexer, out *File) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "body":
			if in.IsNull() {
				in.Skip()
				out.Body = nil
			} else {
				out.Body = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA80d3b19EncodeGithubComK0st1aGophkeeperInternalPkgClientModel4(out *jwriter.Writer, in File) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Body)
	}
	out.RawByte('}')
}
func easyjsonA80d3b19DecodeGithubComK0st1aGophkeeperInternalPkgClientModel3(in *jlexer.Lexer, out *Note) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "body":
			out.Body = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA80d3b19EncodeGithubComK0st1aGophkeeperInternalPkgClientModel3(out *jwriter.Writer, in Note) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix)
		out.String(string(in.Body))
	}
	out.RawByte('}')
}
func easyjsonA80d3b19DecodeGithubComK0st1aGophkeeperInternalPkgClientModel2(in *jlexer.Lexer, out *Password) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "resource":
			out.Resource = string(in.String())
		case "user_name":
			out.UserName = string(in.String())
		case "password":
			out.Password = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA80d3b19EncodeGithubComK0st1aGophkeeperInternalPkgClientModel2(out *jwriter.Writer, in Password) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"resource\":"
		out.RawString(prefix[1:])
		out.String(string(in.Resource))
	}
	{
		const prefix string = ",\"user_name\":"
		out.RawString(prefix)
		out.String(string(in.UserName))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	out.RawByte('}')
}
func easyjsonA80d3b19DecodeGithubComK0st1aGophkeeperInternalPkgClientModel1(in *jlexer.Lexer, out *Card) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "number":
			out.Number = string(in.String())
		case "expires":
			out.Expires = string(in.String())
		case "holder":
			out.Holder = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA80d3b19EncodeGithubComK0st1aGophkeeperInternalPkgClientModel1(out *jwriter.Writer, in Card) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"number\":"
		out.RawString(prefix[1:])
		out.String(string(in.Number))
	}
	{
		const prefix string = ",\"expires\":"
		out.RawString(prefix)
		out.String(string(in.Expires))
	}
	{
		const prefix string = ",\"holder\":"
		out.RawString(prefix)
		out.String(string(in.Holder))
	}
	out.RawByte('}')
}
